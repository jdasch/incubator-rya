package org.apache.rya.indexing.pcj.fluo.app;
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import java.util.Set;

import org.apache.fluo.api.client.TransactionBase;
import org.apache.fluo.api.data.Bytes;
import org.apache.fluo.api.data.Column;
import org.apache.rya.api.domain.RyaSchema;
import org.apache.rya.api.domain.RyaStatement;
import org.apache.rya.api.domain.RyaSubGraph;
import org.apache.rya.indexing.pcj.fluo.app.export.kafka.RyaSubGraphKafkaSerDe;
import org.apache.rya.indexing.pcj.fluo.app.query.ConstructQueryMetadata;
import org.apache.rya.indexing.pcj.fluo.app.query.FluoQueryColumns;
import org.apache.rya.indexing.pcj.storage.accumulo.VisibilityBindingSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class creates results for the ConstructQuery.  This class applies the {@link ConstructGraph}
 * associated with the Construct Query to generate a collection of {@link RyaStatement}s.  These statements
 * are then used to form a {@link RyaSubGraph} that is serialized and stored as a value in the Column
 * {@link FluoQueryColumns#CONSTRUCT_STATEMENTS}.
 *
 */
public class ConstructQueryResultUpdater {

    private static final Logger log = LoggerFactory.getLogger(ConstructQueryResultUpdater.class);
    private static final RyaSubGraphKafkaSerDe serializer = new RyaSubGraphKafkaSerDe();

    /**
     * Updates the Construct Query results by applying the {@link ConnstructGraph} to
     * create a {@link RyaSubGraph} and then writing the subgraph to {@link FluoQueryColumns#CONSTRUCT_STATEMENTS}.
     * @param tx - transaction used to write the subgraph
     * @param bs - BindingSet that the ConstructProjection expands into a subgraph
     * @param metadata - metadata that the ConstructProjection is extracted from
     */
    public void updateConstructQueryResults(final TransactionBase tx, final VisibilityBindingSet bs, final ConstructQueryMetadata metadata) {

        final String nodeId = metadata.getNodeId();
        final Column column = FluoQueryColumns.CONSTRUCT_STATEMENTS;
        final ConstructGraph graph = metadata.getConstructGraph();

        try {
            final Set<RyaStatement> statements = graph.createGraphFromBindingSet(bs);
            final RyaSubGraph subgraph = new RyaSubGraph(metadata.getNodeId(), statements);
            final String resultId = nodeId + "_" + getSubGraphId(subgraph);
            tx.set(Bytes.of(resultId), column, Bytes.of(serializer.toBytes(subgraph)));
        } catch (final Exception e) {
            log.trace("Unable to serialize RyaStatement generated by ConstructGraph: " + graph + " from BindingSet: " + bs );
        }
    }

    /**
     * Generates a simple hash used as an id for the subgraph.  Id generated as hash as opposed
     * to UUID to avoid the same subgraph result being stored under multiple UUID.
     * @param subgraph - subgraph that an id is need for
     * @return - hash of subgraph used as an id
     */
    private int getSubGraphId(final RyaSubGraph subgraph) {
        int id = 17;
        id = 31*id + subgraph.getId().hashCode();
        for(final RyaStatement statement: subgraph.getStatements()) {
            int statementId = 7;
            if(!statement.getSubject().getData().startsWith(RyaSchema.BNODE_NAMESPACE)) {
                statementId = 17*statementId + statement.getSubject().hashCode();
            }
            statementId = 17*statementId + statement.getPredicate().hashCode();
            statementId = 17*statementId + statement.getObject().hashCode();
            id += statementId;
        }
        return Math.abs(id);
    }


}
